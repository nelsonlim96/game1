{"version":3,"sources":["components/Hangman.js","components/container.js","components/shuffle.js","App.js","serviceWorker.js","index.js","components/images/apple.png"],"names":["gameAns","gameStat","StyledContainer","withStyles","root","background","borderRadius","border","color","height","padding","width","display","margin","Container","shuffleArray","original","array","i","length","j","Math","floor","random","Hangman","props","handleClick","val","console","log","setState","st","filled","state","resetButton","shuffledImageSizes","imageSizes","answer","Set","order","bind","this","slice","map","idx","maxWidth","imageSize","style","key","Array","keys","src","originalImages","className","alt","onClick","e","currentTarget","gameOver","mistake","maxWrong","isWinner","generateContainers","generateImages","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","defaultProps","apple","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ae4c5f4b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { StyledContainer } from './container';\n\nimport apple from \"./images/apple.png\";\nimport shuffleArray from \"./shuffle\";\n\nlet gameAns;\nlet gameStat;\nclass Hangman extends Component {\n\tstatic defaultProps = {\n\t\tmaxWrong: 4,\n\t\toriginalImages: [apple, apple, apple, apple],\n\t\timageSizes: ['responsive apple1', 'responsive apple2', 'responsive apple3', 'responsive apple4']\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfilled: 0,\n\t\t\tanswer: new Set(),\n\t\t\torder: ['ascending','descending'],\n\t\t\tshuffledImageSizes: shuffleArray(this.props.imageSizes)\n\t\t};\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\thandleClick = (val) => {\n\t\t// access to e.target here\n\t\tconsole.log(val);\n\t\tthis.setState(st => ({\n\t\t\tfilled: st.filled + 1\n\t\t}));\n\t\tconsole.log(this.state.filled);\n\t}\n\n\tgenerateContainers() {\n\t\treturn this.state.shuffledImageSizes.slice().map(idx => (\n\t\t\t\t<StyledContainer maxWidth=\"sm\"></StyledContainer>\n\t\t\t))\n\t}\n\n\tgenerateImages() {\n\t\treturn this.state.shuffledImageSizes.slice().map(imageSize => (\n\t\t\t<li style={{\"display\": \"inline\"}}>\n\t\t\t\t<button>\n\t\t\t\t\t<img \n\t\t\t\t\t\tkey={[...Array(this.state.shuffledImageSizes.length).keys()]} \n\t\t\t\t\t\tsrc={this.props.originalImages[0]} \n\t\t\t\t\t\tclassName={imageSize} \n\t\t\t\t\t\talt={imageSize}\n\t\t\t\t\t\tonClick={((e) => this.handleClick(e.currentTarget.className))}\n\t\t\t\t\t/>\n\t\t\t\t</button>\n\t\t\t</li>\n\t\t));\n\t}\n\n\tresetButton = () => {\n\t\tthis.setState({\n\t\t\tfilled: 0,\n\t\t\tshuffledImageSizes: shuffleArray(this.props.imageSizes)\n\t\t});\n\t};\n\n\trender() {\n\t\tconst gameOver = this.state.mistake >= this.props.maxWrong;\n\t\tconst isWinner = this.props.imageSizes === this.state.answer;\n\t\tgameAns = this.generateContainers();\n\t\tgameStat = this.generateImages();\n\t\tif (isWinner) {\n\t\t\tgameStat = \"YOU WON\";\n\t\t}\n\t\tif (gameOver) {\n\t\t\tgameStat = \"YOU LOST\";\n\t\t}\n\n\t\treturn (\n\t\t\t<div className='Hangman'>\n\t\t\t\t<nav className='navbar navbar-expand-lg'>\n\t\t\t\t\t<a className='navbar-brand text-dark fontSpace' href='/'>\n\t\t\t\t\t\tSorting Game\n\t\t\t\t\t</a>\n\t\t\t\t\t<span className='d-xl-none d-lg-none text-dark fontSpace'>\n\t\t\t\t\t\tFilled: {this.state.filled}\n\t\t\t\t\t</span>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='navbar-toggler sr-only'\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\tdata-toggle='collapse'\n\t\t\t\t\t\tdata-target='#navbarText'\n\t\t\t\t\t\taria-controls='navbarText'\n\t\t\t\t\t\taria-expanded='false'\n\t\t\t\t\t\taria-label='Toggle navigation'\n\t\t\t\t\t>\n\t\t\t\t\t\t<span className='navbar-toggler-icon'></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className='collapse navbar-collapse' id='navbarText'>\n\t\t\t\t\t\t<ul className='navbar-nav mr-auto'>\n\t\t\t\t\t\t\t<li className='nav-item '></li>\n\t\t\t\t\t\t\t<li className='nav-item'></li>\n\t\t\t\t\t\t\t<li className='nav-item'></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<span className='navbar-text text-dark fontSpace'>Filled: {this.state.filled}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</nav>\n\t\t\t\t<div className='container center'>\n\t\t\t\t\t<p className='text-center instructions'>Arrange in {this.state.order[0]} order as shown below</p>\n\t\t\t\t</div>\n\t\t\t\t<div className='imgArray text-center container'>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><img src={this.props.originalImages[0]} className='responsive apple4' alt={4} /></li>\n\t\t\t\t\t\t<li><img src={this.props.originalImages[0]} className='responsive apple3' alt={3} /></li>\n\t\t\t\t\t\t<li><img src={this.props.originalImages[0]} className='responsive apple2' alt={2} /></li>\n\t\t\t\t\t\t<li><img src={this.props.originalImages[0]} className='responsive apple1' alt={1} /></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t{gameAns}\n\t\t\t\t</div>\n\t\t\t\t<div className='imgArray text-center container'>\n\t\t\t\t\t{gameStat}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t\t<button className='Hangman-reset' onClick={this.resetButton}>\n\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Hangman;","import { Container } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledContainer = withStyles({\r\n    root: {\r\n      background: '#F0F8FF',\r\n      borderRadius: '20px',\r\n      border: '2px solid black',\r\n      color: 'white',\r\n      height: '15em',\r\n      padding: '0 30px',\r\n      width: '15em',\r\n      display: 'inline-block',\r\n      margin: '0 1em 0 1em',\r\n      '@media (max-width: 1200px)': {\r\n        padding: '0 10px',\r\n        height: '8em',\r\n        width: '8em',\r\n      },\r\n      '@media (max-width: 800px)': {\r\n        padding: '0 5px',\r\n        height: '5em',\r\n        width: '5em',\r\n      }\r\n    }\r\n  })(Container);\r\n\r\n  export { StyledContainer };","const shuffleArray = (original) => {\r\n    const array = original;\r\n    for (let i = array.length - 1; i > 0; i -= 1) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\nexport default shuffleArray;","import React from \"react\";\nimport Hangman from \"./components/Hangman\";\n\nfunction App() {\n\treturn (\n\t\t<div className='container'>\n\t\t\t<Hangman />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/apple.ff4c70f3.png\";"],"sourceRoot":""}